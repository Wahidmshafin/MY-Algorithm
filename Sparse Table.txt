/*
Remember: to solve a problem with Sparse Table, you must ensure that

1.Queries do not change the data;
2.Table is associative, meaning F(a,(b,c))=F((a,b),c).

*/

class SparseTable
{

    vector<vector<ll>> table;
    vll lg;
    ll ln, N;

public:
    SparseTable(ll n)
    {
        N = n;
        ln = log2(N) + 1;
        table.assign(N, vll(ln));
        lg.assign(N + 1, 0);
        for (ll i = 2; i <= N; i++)
        {
            lg[i] = lg[i / 2] + 1;
        }
    }
    void create(vll &v)
    {
        for (ll i = 0; i < N; i++)
        {
            table[i][0] = v[i];
        }
        for (ll j = 1; j < ln; j++)
        {
            ll k = (1 << j);
            for (ll i = 0; i + k <= N; i++)
            {
                table[i][j] = min(table[i][j - 1], table[i + k / 2][j - 1]);
                //Here we can also max, xor, gcd, lcd, or, and, sum etc
            }
        }
    }
    
    ll RMQ(ll L, ll R)//Range Minimum Query, works for min, max, gcd etc...O(1)
    {
        ll div = lg[R - L + 1];
        return min(table[L][div], table[R - (1 << div) + 1][div]);
    }

    ll NMQ(ll L, ll R) //Normal Query, works for sum, etc....O(logn)
    {
        ll ans = inf;
        for (ll k = ln; k >= 0; k--)
        {
            if ((1 << k) <= R - L + 1)
            {
                ans = min(ans, table[L][k]);
                L = L + (1 << k);
            }
        }
        return ans;
    }
};
